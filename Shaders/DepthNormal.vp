#if defined(PERFORATED) || _NORMAL != 0
    #ifdef NEED_BASE_TC
#endif

in HIGHP vec4 in_position   : POSITION;
in LOWP vec3 in_normal      : NORMAL;
in MEDIUMP vec2 in_st       : TEXCOORD0;

#if _NORMAL != 0
    in LOWP vec4 in_tangent : TANGENT;
#endif

out VS_OUT {
#ifdef NEED_BASE_TC
    MEDIUMP vec2 tex;
#endif

#if _NORMAL != 0
    LOWP vec3 tangentToWorldMatrixS;
    LOWP vec3 tangentToWorldMatrixT;
    LOWP vec3 tangentToWorldMatrixR;
#else
    LOWP vec3 normalWS;
#endif

#if _PARALLAX
    vec3 viewTS;
#endif
} vs_out;

#if defined(INSTANCING)
    $include "Instancing.vp"
#else
    uniform mat4x3 localToWorldMatrix;
    uniform mat3 worldToLocalMatrix;
#endif

#ifdef GPU_SKINNING
    #if defined(GPU_SKINNING_1_WEIGHTS)
        $include "SkinningMatrix1.glsl"
    #elif defined(GPU_SKINNING_4_WEIGHTS)
        $include "SkinningMatrix4.glsl"
    #elif defined(GPU_SKINNING_8_WEIGHTS)
        $include "SkinningMatrix8.glsl"
    #endif
#endif

uniform vec4 textureMatrixS;
uniform vec4 textureMatrixT;

uniform mat4 viewProjectionMatrix;
uniform mat4 modelViewProjectionMatrix;

void main() {
    vec4 positionLS;
    vec3 normalLS;

#ifdef NEED_BASE_TC
    vs_out.tex.x = dot(textureMatrixS, vec4(in_st, 0.0, 1.0));
    vs_out.tex.y = dot(textureMatrixT, vec4(in_st, 0.0, 1.0));
#endif

#if _NORMAL != 0
    vec3 tangentLS;
    vec3 bitangentLS;

    #ifdef COMPRESSED_VERTEX_NORMAL_TANGENTS
        vec3 vNormal = in_normal.xyz * 2.0 - 1.0;
        vec4 vTangent = in_tangent * 2.0 - 1.0;
    #else
        vec3 vNormal = in_normal.xyz;
        vec4 vTangent = in_tangent;
    #endif

    #ifdef GPU_SKINNING
        skinningMatrix(in_position, positionLS, vNormal, normalLS, vTangent, tangentLS, bitangentLS);
    #else
        positionLS = in_position;
        normalLS = vNormal;
        tangentLS = vTangent.xyz;
        bitangentLS = normalize(cross(vNormal, vTangent.xyz) * vTangent.w);
    #endif
#else
    #ifdef COMPRESSED_VERTEX_NORMAL_TANGENTS
        vec3 vNormal = in_normal.xyz * 2.0 - 1.0;
    #else
        vec3 vNormal = in_normal.xyz;
    #endif

    #ifdef GPU_SKINNING
        skinningMatrix(in_position, positionLS, vNormal, normalLS);
    #else
        positionLS = in_position;
        normalLS = vNormal;
    #endif
#endif

#if _NORMAL != 0
    #if _PARALLAX
        vec4 positionWS = vec4(localToWorldMatrix * positionLS, 1.0);

        vec3 viewWS = viewOrigin.xyz - positionWS.xyz;
        vec3 viewLS = worldToLocalMatrix * viewWS;

        vs_out.viewTS.x = dot(tangentLS, viewLS);
        vs_out.viewTS.y = dot(bitangentLS, viewLS);
        vs_out.viewTS.z = dot(normalLS, viewLS);
    #endif

    vs_out.tangentToWorldMatrixS = mat3(localToWorldMatrix) * tangentLS;
    vs_out.tangentToWorldMatrixT = mat3(localToWorldMatrix) * bitangentLS;
    vs_out.tangentToWorldMatrixR = mat3(localToWorldMatrix) * normalLS;
#else
    vs_out.normalWS = mat3(localToWorldMatrix) * normalLS;
#endif

#ifdef INSTANCING
    gl_Position = viewProjectionMatrix * vec4(localToWorldMatrix * positionLS, 1.0);
#else

    gl_Position = modelViewProjectionMatrix * positionLS;
#endif
}
